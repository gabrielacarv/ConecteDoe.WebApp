@using ConecteDoe.Dominio.Entities

@model IEnumerable<Usuario>


<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Conecte Doe</title>
    <script src="https://kit.fontawesome.com/64d58efce2.js" crossorigin="anonymous"></script>
    <!--
      - favicon link
    -->
    <link rel="shortcut icon" href="https://raw.githubusercontent.com/gabrielacarv/ConecteDoeImagens/main/ConecteDoe.ico" type="image/svg+xml">

    <!--
      - custom css link
    -->
    <link rel="stylesheet" href="~/css/FeedInstituicao.css" asp-append-version="true" />

    <!--
      - google font link
    -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbs5uP6N8rWi4qN6l5zg0y1W8WBRjISkYoYtBYb1L4pUZ5Jg6A/kwY8R+2DO2MMy" crossorigin="anonymous">

    <script src="script.js" defer></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <header>
        <div class="container">

            <a href="#" class="logo">
                <img src="https://raw.githubusercontent.com/gabrielacarv/ConecteDoeImagens/main/LogoConecteDoe.png" width="180px" alt="ConecteDoe logo">
            </a>
            <div class="navbar-wrapper">
                <button class="navbar-menu-btn" data-navbar-toggle-btn>
                    <ion-icon name="menu-outline"></ion-icon>
                </button>
                <nav class="navbar" data-navbar>
                    <ul class="navbar-list">
                        <li class="nav-item">
                            <a asp-controller="Plataforma" asp-action="Index" class="nav-link">Início</a>
                        </li>
                        <li class="nav-item">
                            <a href="#about" class="nav-link">Instituições</a>
                        </li>

                        <li class="nav-item">
                            <a asp-controller="Logar" asp-action="Logout">
                                <svg id="IconSair" xmlns="http://www.w3.org/2000/svg" height="1.2em" viewBox="0 0 512 512">
                                    <!--! Font Awesome Free 6.4.2 by @@fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
                                    <style>
                                        svg {
                                            fill: #abed1a
                                        }</style>
                                    <path d="M377.9 105.9L500.7 228.7c7.2 7.2 11.3 17.1 11.3 27.3s-4.1 20.1-11.3 27.3L377.9 406.1c-6.4 6.4-15 9.9-24 9.9c-18.7 0-33.9-15.2-33.9-33.9l0-62.1-128 0c-17.7 0-32-14.3-32-32l0-64c0-17.7 14.3-32 32-32l128 0 0-62.1c0-18.7 15.2-33.9 33.9-33.9c9 0 17.6 3.6 24 9.9zM160 96L96 96c-17.7 0-32 14.3-32 32l0 256c0 17.7 14.3 32 32 32l64 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-64 0c-53 0-96-43-96-96L0 128C0 75 43 32 96 32l64 0c17.7 0 32 14.3 32 32s-14.3 32-32 32z" />
                                </svg>
                            </a>
                        </li>

                        @* <a asp-controller="Logar" asp-action="Index" class="nav-link">
                        Sair
                        </a> *@
                    </ul>

                    @* <a asp-controller="Logar" asp-action="Index"><button class="btn btn-primary">Sair</button></a> *@
                </nav>
            </div>
        </div>
    </header>


    <section>
        <div class="container">
            @using (Html.BeginForm("Busca", "Administracao", FormMethod.Get))
            {
                <div class="form-group">
                    <input type="text" name="searchTerm" placeholder="Pesquisa" />
                    <button type="submit">Buscar</button>
                </div>
            }
            <div class="card-container">
                    @foreach (var item in Model)
                    {
                        <div class="card-conteudo">
                            <div class="card-dados-principal">
                            <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT85VbZ8wHdLOLkr2OyuBOOZ4WgeFMMvORLejAuM_WHipG5GMNGzL8V-a5F7I2L9PUQlSI&usqp=CAU">
                                <div class="texto-superior">
                                    <h1>Nome Instituicao</h1>
                                    <p>Categoria</p>
                                    <div class="localidade">
                                        <svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 384 512"><!--! Font Awesome Free 6.4.2 by @@fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. --><path d="M215.7 499.2C267 435 384 279.4 384 192C384 86 298 0 192 0S0 86 0 192c0 87.4 117 243 168.3 307.2c12.3 15.3 35.1 15.3 47.4 0zM192 128a64 64 0 1 1 0 128 64 64 0 1 1 0-128z" /></svg>
                                        <p>@item.Nome</p>
                                    </div>      
                                </div>                       
                            </div>
                        <div  class="card-dados-secundarios">
                                <h4>Causa</h4>
                                <div class="texto-limitado">
                                <p class="texto-Para-Limitar">Em um mundo cada vez mais conectado, a tecnologia desempenha um papel fundamental em nossa vida cotidiana. Desde a comunicação instantânea até a busca por informações, estamos imersos em um universo digital. No entanto, é crucial lembrar que, apesar dos avanços tecnológicos, a essência da humanidade reside na empatia, compaixão e solidariedade. Ao estender uma mão amiga, construímos pontes que transcendem as fronteiras virtuais, formando uma rede de apoio que sustenta a sociedade. À medida que exploramos novos horizontes tecnológicos, não devemos esquecer a importância de cultivar relações significativas, nutrindo o espírito humano em meio ao avanço constante da inovação.</p>
                                </div>
                            </div>
                        </div>
                    }     
            </div>
        </div>

        @*<div class="pagination">
            @for (int i = 1; i <= ViewBag.TotalPaginas; i++)
            {
                <a href="@Url.Action("FeedInstituicao", new { pagina = i, itensPorPagina = ViewBag.ItensPorPagina })">
                    @i
                </a>
            }
        </div>*@



        <div class="container-pagination">
            @*<button class="button" id="startBtn" disabled>
                <i class="fa-solid fa-angles-left"></i>
            </button>
            <button class="button prevNext" id="prev" disabled>
                <i class="fa-solid fa-angle-left"></i>
            </button>*@
            <div class="links">
                @for (int i = 1; i <= ViewBag.TotalPaginas; i++)
                {
                    <a href="@Url.Action("FeedInstituicao", new { pagina = i, itensPorPagina = ViewBag.ItensPorPagina })" class="link @(i == ViewBag.PaginaAtual ? "active" : "")">
                        @i
                    </a>
                }
            </div>
            @*<button class="button prevNext" id="next">
                <i class="fa-solid fa-angle-right"></i>
            </button>
            <button class="button" id="endBtn">
                <i class="fa-solid fa-angles-right"></i>
            </button>*@
        </div>






    </section>

    

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Limite de caracteres para texto
            var elementosTexto = document.querySelectorAll('.texto-para-limitar');

            elementosTexto.forEach(function (elemento) {
                var textoCompleto = elemento.textContent;
                var limiteCaracteres = 365; // Defina o número desejado de caracteres

                if (textoCompleto.length > limiteCaracteres) {
                    var textoExibido = textoCompleto.substring(0, limiteCaracteres);
                    elemento.textContent = textoExibido + '...';
                }
            });

            //// Paginação
            // Selecting DOM elements
            const startBtn = document.querySelector("#startBtn"),
                endBtn = document.querySelector("#endBtn"),
                prevNext = document.querySelectorAll(".prevNext"),
                links = document.querySelectorAll(".link");

            // Setting an initial step
            let currentStep = ViewBag.PaginaAtual - 1; // Ajuste para começar na página correta

            // Function to update the button states
            const updateBtn = () => {
                startBtn.disabled = currentStep === 0;
                prevNext[0].disabled = currentStep === 0;
                endBtn.disabled = currentStep === links.length - 1;
                prevNext[1].disabled = currentStep === links.length - 1;

                // Remove the "active" class from all links
                links.forEach(link => link.classList.remove("active"));
                // Add the "active" class to the current page link
                links[currentStep].classList.add("active");
            };

            // Add event listeners to the number links
            links.forEach((link, index) => {
                link.addEventListener("click", (e) => {
                    e.preventDefault();
                    // Set the current step to the clicked number link
                    currentStep = index;
                    updateBtn(); // Update the button states
                });
            });

            // Add event listeners to the "Previous" and "Next" buttons
            prevNext.forEach((button, index) => {
                button.addEventListener("click", () => {
                    // Increment or decrement the current step based on the button clicked
                    currentStep += index === 1 ? 1 : -1;
                    updateBtn(); // Update the button states
                });
            });

            // Add event listener to the "Start" button
            startBtn.addEventListener("click", () => {
                currentStep = 0;
                updateBtn(); // Update the button states
            });

            // Add event listener to the "End" button
            endBtn.addEventListener("click", () => {
                currentStep = links.length - 1;
                updateBtn(); // Update the button states
            });

            // Initial button state setup
            updateBtn();
            
           
        });




    </script>
</body>